[project]
name = "readwise-digest"
version = "0.1.0"
description = "A comprehensive Python SDK for the Readwise API with polling and digest functionality"
readme = "README.md"
requires-python = ">=3.9"
dependencies = [
    "requests>=2.25.0",
    "python-dotenv>=0.19.0",
    "sqlalchemy>=2.0.41",
    "fastapi>=0.116.1",
    "uvicorn>=0.35.0",
    "alembic>=1.16.4",
]
authors = [
    {name = "Readwise Digest", email = "noreply@example.com"}
]
license = {text = "MIT"}
keywords = ["readwise", "api", "highlights", "books", "reading"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
]

[project.urls]
Homepage = "https://github.com/EvanOman/readwise-digest"
Repository = "https://github.com/EvanOman/readwise-digest"
Documentation = "https://github.com/EvanOman/readwise-digest#readme"
Issues = "https://github.com/EvanOman/readwise-digest/issues"

[project.optional-dependencies]
dev = [
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    "responses>=0.25.7",
    "ruff>=0.8.0",
    "mypy>=1.13.0",
    "types-requests>=2.25.0",
    "pre-commit>=4.0.0",
]
test = [
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    "responses>=0.25.7",
]

[project.scripts]
readwise-digest = "readwise_digest.cli:main"

[dependency-groups]
dev = [
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    "responses>=0.25.7",
    "ruff>=0.8.0",
    "mypy>=1.13.0",
    "types-requests>=2.25.0",
    "pre-commit>=4.0.0",
]

[tool.ruff]
# Same as Black.
line-length = 100
indent-width = 4

# Assume Python 3.9+
target-version = "py39"

[tool.ruff.lint]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
select = ["E", "F", "W", "I", "N", "UP", "B", "A", "C4", "PL", "RUF"]
ignore = [
    "E501",  # Line too long (handled by formatter)
    "PLR0913",  # Too many arguments
    "PLR2004",  # Magic value used in comparison
    "PLR0912",  # Too many branches
    "PLC0415",  # Import outside top-level (sometimes needed)
    "B904",    # Exception chaining (not always needed)
    "B008",    # Do not perform function calls in argument defaults (FastAPI pattern)
    "A002",    # Argument shadowing builtin (format is common)
    "F841",    # Local variable assigned but never used (sometimes intentional)
    "PLW0603", # Global statement (sometimes needed for singletons)
    "PLW2901", # Loop variable overwritten by assignment target
    "N806",    # Variable should be lowercase (SessionLocal is a common pattern)
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",  # Use of assert in tests
    "PLR2004",  # Magic value used in comparison
    "ARG001",  # Unused function argument
]

[tool.mypy]
python_version = "3.9"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = false
warn_no_return = false
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "responses.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
